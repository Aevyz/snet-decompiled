package com.google.android.gms.common.api.internal;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.PendingResult.StatusListener;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.ResultStore;
import com.google.android.gms.common.api.ResultTransform;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.TransformedResult;
import com.google.android.gms.common.internal.Preconditions;
import java.util.concurrent.TimeUnit;

public class SentinelPendingResult<R extends Result> extends PendingResult<R> {
    public static final String EXCEPTION_TEXT = "Operation not supported on PendingResults generated by ResultTransform.createFailedResult()";
    private final Status mStatus;

    public SentinelPendingResult(Status status) {
        Preconditions.checkNotNull(status, "Status must not be null");
        Preconditions.checkArgument(!status.isSuccess(), "Status must not be success");
        this.mStatus = status;
    }

    @NonNull
    Status getStatus() {
        return this.mStatus;
    }

    @NonNull
    public R await() {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }

    @NonNull
    public R await(long time, @NonNull TimeUnit units) {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }

    public void cancel() {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }

    public boolean isCanceled() {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }

    public void setResultCallback(@NonNull ResultCallback<? super R> resultCallback) {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }

    public void setResultCallback(@NonNull ResultCallback<? super R> resultCallback, long time, @NonNull TimeUnit units) {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }

    public void store(@NonNull ResultStore resultStore, int resultId) {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }

    public void addStatusListener(@NonNull StatusListener callback) {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }

    @NonNull
    public <S extends Result> TransformedResult<S> then(@NonNull ResultTransform<? super R, ? extends S> resultTransform) {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }

    public void setResultId(int resultId) {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }

    @Nullable
    public Integer getResultId() {
        throw new UnsupportedOperationException(EXCEPTION_TEXT);
    }
}
