package com.google.android.gms.common.api.internal;

import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.PendingResult.StatusListener;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.ResultStore;
import com.google.android.gms.common.api.Status;
import java.util.concurrent.TimeUnit;

public final class OptionalPendingResultImpl<R extends Result> extends OptionalPendingResult<R> {
    private final BasePendingResult<R> mPendingResultImpl;

    public OptionalPendingResultImpl(PendingResult<R> pendingResult) {
        if (pendingResult instanceof BasePendingResult) {
            this.mPendingResultImpl = (BasePendingResult) pendingResult;
            return;
        }
        throw new IllegalArgumentException("OptionalPendingResult can only wrap PendingResults generated by an API call.");
    }

    public boolean isDone() {
        return this.mPendingResultImpl.isReady();
    }

    public R get() {
        if (isDone()) {
            return await(0, TimeUnit.MILLISECONDS);
        }
        throw new IllegalStateException("Result is not available. Check that isDone() returns true before calling get().");
    }

    public R await() {
        return this.mPendingResultImpl.await();
    }

    public R await(long time, TimeUnit units) {
        return this.mPendingResultImpl.await(time, units);
    }

    public void cancel() {
        this.mPendingResultImpl.cancel();
    }

    public boolean isCanceled() {
        return this.mPendingResultImpl.isCanceled();
    }

    public void setResultCallback(ResultCallback<? super R> callback) {
        this.mPendingResultImpl.setResultCallback(callback);
    }

    public void setResultCallback(ResultCallback<? super R> callback, long time, TimeUnit units) {
        this.mPendingResultImpl.setResultCallback(callback, time, units);
    }

    public void store(ResultStore resultStore, int resultId) {
        this.mPendingResultImpl.store(resultStore, resultId);
    }

    public final void setResult(R result) {
        this.mPendingResultImpl.setResult(result);
    }

    public final void forceFailureUnlessReady(Status status) {
        this.mPendingResultImpl.forceFailureUnlessReady(status);
    }

    public void addStatusListener(StatusListener callback) {
        this.mPendingResultImpl.addStatusListener(callback);
    }

    public void setResultId(int resultId) {
        this.mPendingResultImpl.setResultId(resultId);
    }

    public Integer getResultId() {
        return this.mPendingResultImpl.getResultId();
    }
}
